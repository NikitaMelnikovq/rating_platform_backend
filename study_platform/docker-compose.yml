version: '3.8'

services:
  django:
    build:
      context: .
    container_name: django_app
    command: >
      sh -c "
      until pg_isready -h db -p 5432; do echo waiting for db; sleep 2; done; python manage.py makemigrations &&
      python manage.py migrate && 
      gunicorn --bind 0.0.0.0:8000 study_platform.wsgi:application"
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started

  db:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest  
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"

  redis:
    image: redis:6
    container_name: redis
    ports:
      - "6379:6379"

  celery:
    build:
      context: .
    container_name: celery_worker
    command: celery -A study_platform worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started

  celery_beat:
    build:
      context: .
    container_name: celery_beat
    command: celery -A study_platform beat --loglevel=info
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started

volumes:
  postgres_data:
